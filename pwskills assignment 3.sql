Use mavenmovies;







-- Q1** Rank the customers based on the total amount they've spendt on rentals.**

select * from customer;
select * from payment;
select first_name,last_name, payment as total_amount from customer where rental_id>=(select distinct sum(amount) from payment);

select customer.customer_id, sum(f.rental_rate)as total_spent,rank() over
(order by sum(f.rental_rate)desc) as customer_rank from customer 
inner join rental r on customer.customer_id=r.customer_id 
inner join inventory i on r.inventory_id=i.inventory_id 
inner join film f on i.film_id=f.film_id group by customer.customer_id order by total_spent;

-- Q2** Calculated the cumulative revenue generated by each film over time.**
select * from inventory;
select * from film;
select f.film_id,f.title,rental_date, sum(rental_rate) over (partition by film_id order by r.rental_date desc) as cumulative_revenue from film f
inner join 
inventory as i on f.film_id=i.film_id
inner join 
rental r on i.inventory_id=r.inventory_id
order by f.film_id;

-- Q3** Determine the average rental duration for each film. considering films with similar lengths.**

select * from film;
select f.film_id,length, avg(rental_duration)over(partition by f.film_id ) as avg_rental_duration from film as f order by film_id;

-- Q4** Identify the top 3 films in each category based on their rental counts.** 

select title, count(film_id) as film_count from film group by film_id having count(film_id) order by film_count limit 3;

with film_rank as (select fc.category_id,fc.film_id,f.title,row_number() over
(partition by fc.category_id order by count(r.rental_id) desc) as ranking from film_category fc
 join
 film f on fc.film_id=f.film_id 
 join
 inventory i on f.film_id=i.film_id
 join
 rental r on i. inventory_id=r.inventory_id 
 group by
 fc.category_id, fc.film_id,f.title) select category_id, film_id, title, ranking from film_rank where ranking<=3;

-- Q5** Calculate the difference in rental counts between each  customer's total rentals and the average rentals across all customers.**

with customerRentalCounts as
 (select c.customer_id, count(r.rental_id)as rental_count, avg(count(r.rental_id)) 
 over () as avg_rental_count from customer c join
 rental r on c.customer_id = r.customer_id group by c.customer_id )
 select customer_id, rental_count, rental_count - avg_rental_count as rental_count_difference from customerRentalCounts;

-- Q6** Find the monthly revenue trend for the entire rental store over time.**

select date_format(rental_date, 'Y-%%m') as month, sum(rental_rate)
 over
 (order by date_format(rental_date,'%Y-%m'))
 as monthly_revenue from rental 
 join
 inventory on rental.inventory_id=inventory.inventory_id 
 join 
 film on inventory.film_id=film.film_id
order by month;

-- Q7** Identify the cutomers whose total spending on rentals falls within the top 20% of all customers.**

with customer_spending as (select customer_id, sum(amount) as total_spending, rank()
 over
 (order by sum(amount)desc) as customer_rank from payment
 group by customer_id) select customer_id, total_spending from customer_spending
 where customer_rank<= (select 0.2* count(distinct customer_id)+1 from customer_ spending);

-- Q8** Calculate the running total of rentals per category, ordered by rental count.**

with category_rental_count as (
 select fc.category_id,count(r.rental_id) as rental_count,
 rank () over (partition by fc.category_id order by count(r.rental_id)desc)
 as rental_rank
 from film_category fc
 join
 rental r on fc.film_id = r.inventory_id
 group by fc.category_id
 )
 select 
		category_id,
        rental_count,
        sum(rental_count) over (order by rental_rank) as runing_total
        from category_rental_count 
        order by rental_rank;

-- Q9** Find the films that have been rented less than the average rental count for their respective categories.**

with film_rental as(
 select fc.film_id ,
 fc.category_id,
 count(rental_id) as rental_count,
 avg(count(rental_id)) over(partition by category_id) as avg_rental_count
 from film_category as fc
 join
 rental r on fc.film_id= r.inventory_id
 group by fc.film_id,fc.category_id)
 select 
 film_id,
 category_id,
rental_count,
avg_rental_count
from film_rental
where rental_count< avg_rental_count;

-- Q10 ** Identify the top 5 months with the highest revenue and display the revenue generated in each month.**

with film_rental as(
 select fc.film_id ,
 fc.category_id,
 count(rental_id) as rental_count,
 avg(count(rental_id)) over(partition by category_id) as avg_rental_count
 from film_category as fc
 join
 rental r on fc.film_id= r.inventory_id
 group by fc.film_id,fc.category_id)
 select 
 film_id,
 category_id,
rental_count,
avg_rental_count
from film_rental
where rental_count< avg_rental_count;
